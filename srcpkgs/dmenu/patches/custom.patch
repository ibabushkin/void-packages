diff --git config.def.h config.def.h
index 1edb647..5b65b7f 100644
--- config.def.h
+++ config.def.h
@@ -2,15 +2,16 @@
 /* Default settings; can be overriden by command line. */
 
 static int topbar = 1;                      /* -b  option; if 0, dmenu appears at bottom     */
+static int instant = 0;                     /* -n  option; if 1, dmenu ends immediately on a distinct match */
 /* -fn option overrides fonts[0]; default X11 font or font set */
 static const char *fonts[] = {
-	"monospace:size=10"
+	"monospace:size=8"
 };
 static const char *prompt      = NULL;      /* -p  option; prompt to the left of input field */
 static const char *colors[SchemeLast][2] = {
 	/*     fg         bg       */
-	[SchemeNorm] = { "#bbbbbb", "#222222" },
-	[SchemeSel] = { "#eeeeee", "#005577" },
+	[SchemeNorm] = { "#20201d", "#fefbec" },
+	[SchemeSel] = { "#20201d", "#eeeeee" },
 	[SchemeOut] = { "#000000", "#00ffff" },
 };
 /* -l option; if nonzero, dmenu uses vertical list with given number of lines */
diff --git dmenu.1 dmenu.1
index 9eab758..c2caf14 100644
--- dmenu.1
+++ dmenu.1
@@ -8,6 +8,8 @@ dmenu \- dynamic menu
 .IR lines ]
 .RB [ \-m
 .IR monitor ]
+.IR lines ]
+.RB [ \-n ]
 .RB [ \-p
 .IR prompt ]
 .RB [ \-fn
@@ -50,10 +52,31 @@ dmenu matches menu items case insensitively.
 .BI \-l " lines"
 dmenu lists items vertically, with the given number of lines.
 .TP
+.BI \-x " xoffset"
+dmenu is placed at this offset measured from the left side of the monitor.
+Can be negative.
+If option
+.B \-m
+is present, the measurement will use the given monitor.
+.TP
+.BI \-y " yoffset"
+dmenu is placed at this offset measured from the top of the monitor.  If the
+.B \-b
+option is used, the offset is measured from the bottom.  Can be negative.
+If option
+.B \-m
+is present, the measurement will use the given monitor.
+.TP
+.BI \-w " width"
+sets the width of the dmenu window.
+.TP
 .BI \-m " monitor"
 dmenu is displayed on the monitor number supplied. Monitor numbers are starting
 from 0.
 .TP
+.BI \-n
+instant match, end dmenu if there is only one match left.
+.TP
 .BI \-p " prompt"
 defines the prompt to be displayed to the left of the input field.
 .TP
@@ -85,7 +108,7 @@ dmenu is completely controlled by the keyboard.  Items are selected using the
 arrow keys, page up, page down, home, and end.
 .TP
 .B Tab
-Copy the selected item to the input field.
+Copy the first item to the input field, which differs from the input.
 .TP
 .B Return
 Confirm selection.  Prints the selected item to stdout and exits, returning
diff --git dmenu.c dmenu.c
index d605ab4..7d4baa9 100644
--- dmenu.c
+++ dmenu.c
@@ -38,6 +38,9 @@ static char *embed;
 static int bh, mw, mh;
 static int inputw = 0, promptw;
 static int lrpad; /* sum of left and right padding */
+static int dmx = 0; /* put dmenu at this x offset */
+static int dmy = 0; /* put dmenu at this y offset (measured from the bottom if topbar is 0) */
+static unsigned int dmw = 0; /* make dmenu this wide */
 static size_t cursor;
 static struct item *items = NULL;
 static struct item *matches, *matchend;
@@ -260,6 +263,11 @@ match(void)
 		matchend = substrend;
 	}
 	curr = sel = matches;
+	if (instant && matches && matches == matchend) {
+		puts(matches->text);
+		cleanup();
+		exit(0);
+	}
 	calcoffsets();
 }
 
@@ -449,6 +457,16 @@ keypress(XKeyEvent *ev)
 	case XK_Tab:
 		if (!sel)
 			return;
+
+		/* get the first entry differing from the current text */
+		while (!strncmp(text, sel->text, sizeof text - 1) &&
+				sel->right && (sel = sel->right) == next) {
+			if (!sel)
+				return;
+			curr = next;
+			calcoffsets();
+		}
+
 		strncpy(text, sel->text, sizeof text - 1);
 		text[sizeof text - 1] = '\0';
 		cursor = strlen(text);
@@ -542,6 +560,7 @@ setup(void)
 	int x, y, i = 0;
 	unsigned int du;
 	XSetWindowAttributes swa;
+	XWindowChanges wch;
 	XIM xim;
 	Window w, dw, *dws;
 	XWindowAttributes wa;
@@ -560,7 +579,7 @@ setup(void)
 	utf8 = XInternAtom(dpy, "UTF8_STRING", False);
 
 	/* calculate menu geometry */
-	bh = drw->fonts->h + 2;
+	bh = drw->fonts->h + 8;
 	lines = MAX(lines, 0);
 	mh = (lines + 1) * bh;
 #ifdef XINERAMA
@@ -588,9 +607,9 @@ setup(void)
 				if (INTERSECT(x, y, 1, 1, info[i]))
 					break;
 
-		x = info[i].x_org;
-		y = info[i].y_org + (topbar ? 0 : info[i].height - mh);
-		mw = info[i].width;
+		x = info[i].x_org + dmx;
+		y = info[i].y_org + (topbar ? dmy : info[i].height - (mh + 2) - dmy);
+		mw = (dmw>0 ? dmw : info[i].width - 2);
 		XFree(info);
 	} else
 #endif
@@ -598,9 +617,9 @@ setup(void)
 		if (!XGetWindowAttributes(dpy, parentwin, &wa))
 			die("could not get embedding window attributes: 0x%lx",
 			    parentwin);
-		x = 0;
-		y = topbar ? 0 : wa.height - mh;
-		mw = wa.width;
+		x = dmx;
+		y = topbar ? dmy : wa.height - (mh + 2) - dmy;
+		mw = dmw > 0 ? dmw : wa.width - 2;
 	}
 	promptw = (prompt && *prompt) ? TEXTW(prompt) - lrpad / 4 : 0;
 	inputw = MIN(inputw, mw/3);
@@ -609,10 +628,14 @@ setup(void)
 	/* create menu window */
 	swa.override_redirect = True;
 	swa.background_pixel = scheme[SchemeNorm][ColBg].pixel;
+	swa.border_pixel = scheme[SchemeSel][ColBg].pixel;
 	swa.event_mask = ExposureMask | KeyPressMask | VisibilityChangeMask;
 	win = XCreateWindow(dpy, parentwin, x, y, mw, mh, 0,
 	                    CopyFromParent, CopyFromParent, CopyFromParent,
-	                    CWOverrideRedirect | CWBackPixel | CWEventMask, &swa);
+	                    CWOverrideRedirect | CWBackPixel | CWBorderPixel | CWEventMask,
+                        &swa);
+	wch.border_width = 1;
+	XConfigureWindow(dpy, win, CWBorderWidth, &wch);
 
 	/* open input methods */
 	xim = XOpenIM(dpy, NULL, NULL, NULL);
@@ -637,7 +660,8 @@ static void
 usage(void)
 {
 	fputs("usage: dmenu [-bfiv] [-l lines] [-p prompt] [-fn font] [-m monitor]\n"
-	      "             [-nb color] [-nf color] [-sb color] [-sf color] [-w windowid]\n", stderr);
+	      "             [-x xoffset] [-y yoffset] [-W width] [-w windowid]\n"
+	      "             [-nb color] [-nf color] [-sb color] [-sf color]\n", stderr);
 	exit(1);
 }
 
@@ -659,11 +683,19 @@ main(int argc, char *argv[])
 		else if (!strcmp(argv[i], "-i")) { /* case-insensitive item matching */
 			fstrncmp = strncasecmp;
 			fstrstr = cistrstr;
+		} else if (!strcmp(argv[i], "-n")) { /* instant match */
+			instant = !instant;
 		} else if (i + 1 == argc)
 			usage();
 		/* these options take one argument */
 		else if (!strcmp(argv[i], "-l"))   /* number of lines in vertical list */
 			lines = atoi(argv[++i]);
+		else if (!strcmp(argv[i], "-x"))   /* window x offset */
+			dmx = atoi(argv[++i]);
+		else if (!strcmp(argv[i], "-y"))   /* window y offset (from bottom up if -b) */
+			dmy = atoi(argv[++i]);
+		else if (!strcmp(argv[i], "-W"))   /* make dmenu this wide */
+			dmw = atoi(argv[++i]);
 		else if (!strcmp(argv[i], "-m"))
 			mon = atoi(argv[++i]);
 		else if (!strcmp(argv[i], "-p"))   /* adds prompt to left of input field */
diff --git dmenu_path dmenu_path
old mode 100644
new mode 100755
